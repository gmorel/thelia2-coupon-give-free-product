<?php
/**********************************************************************************/
/*                                                                                */
/*      Thelia	                                                                  */
/*                                                                                */
/*      Copyright (c) OpenStudio                                                  */
/*      email : info@thelia.net                                                   */
/*      web : http://www.thelia.net                                               */
/*                                                                                */
/*      This program is free software; you can redistribute it and/or modify      */
/*      it under the terms of the GNU General Public License as published by      */
/*      the Free Software Foundation; either version 3 of the License             */
/*                                                                                */
/*      This program is distributed in the hope that it will be useful,           */
/*      but WITHOUT ANY WARRANTY; without even the implied warranty of            */
/*      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             */
/*      GNU General Public License for more details.                              */
/*                                                                                */
/*      You should have received a copy of the GNU General Public License         */
/*	    along with this program. If not, see <http://www.gnu.org/licenses/>.      */
/*                                                                                */
/**********************************************************************************/

namespace CouponGiveProduct\Coupon\Type;

use Thelia\Core\Event\Cart\CartEvent;
use Thelia\Core\Event\TheliaEvents;
use Thelia\Coupon\FacadeInterface;
use Thelia\Coupon\Type\CouponAbstract;
use Thelia\Model\CartItem;
use Thelia\Model\ProductSaleElements;
use Thelia\Model\ProductSaleElementsQuery;

/**
 * Created by JetBrains PhpStorm.
 * Date: 20/12/13
 * Time: 19:24 PM
 *
 * Allow to add a given product to the Customer cart for free
 *
 * @package Coupon
 * @author  Guillaume MOREL <gmorel@openstudio.fr>
 *
 */
class GiveProduct extends CouponAbstract
{
    const FREE_CART_ITEM_NAME = 'Product for free';

    /** @var string Service Id  */
    protected $serviceId = 'thelia.coupon.type.give_product';

    /** @var int Product Sale Element id you wish to offer */
    protected $productSaleElementsId = 0;

    /**
     * Set Coupon
     *
     * @param FacadeInterface $facade                     Provides necessary value from Thelia
     * @param string          $code                       Coupon code (ex: XMAS)
     * @param string          $title                      Coupon title (ex: Coupon for XMAS)
     * @param string          $shortDescription           Coupon short description
     * @param string          $description                Coupon description
     * @param int             $productSaleElementsId      Product Sale Element id you wish to offer
     * @param bool            $isCumulative               If Coupon is cumulative
     * @param bool            $isRemovingPostage          If Coupon is removing postage
     * @param bool            $isAvailableOnSpecialOffers If available on Product already
     *                                                    on special offer price
     * @param bool            $isEnabled                  False if Coupon is disabled by admin
     * @param int             $maxUsage                   How many usage left
     * @param \Datetime       $expirationDate             When the Code is expiring
     *
     * @return $this
     */
    public function set(
        FacadeInterface $facade,
        $code,
        $title,
        $shortDescription,
        $description,
        $productSaleElementsId,
        $isCumulative,
        $isRemovingPostage,
        $isAvailableOnSpecialOffers,
        $isEnabled,
        $maxUsage,
        \DateTime $expirationDate
    )
    {
        $this->code = $code;
        $this->title = $title;
        $this->shortDescription = $shortDescription;
        $this->description = $description;

        $this->isCumulative = $isCumulative;
        $this->isRemovingPostage = $isRemovingPostage;

        $this->productSaleElementsId = $productSaleElementsId;

        $this->isAvailableOnSpecialOffers = $isAvailableOnSpecialOffers;
        $this->isEnabled = $isEnabled;
        $this->maxUsage = $maxUsage;
        $this->expirationDate = $expirationDate;
        $this->facade = $facade;

        return $this;
    }

    /**
     * Return effects generated by the coupon
     * A new product in the cart
     *
     * @return float The discount
     */
    public function exec()
    {
        $discount = 0;

        // Since the exec method will be called each time the cart checks its integrity
        //  We need to check if the free product has already been inserted in the Cart
        if (!$this->isAlreadyInCart($this->productSaleElementsId)) {

            /** @var ProductSaleElements $productToGive */
            $productToGive = $this->getFreeProduct();
            $this->addProductToCustomerCart($productToGive);

            // We return the product price in order to deduct it from the Cart
            // Otherwise the product would not be given for free
            $discount = $productToGive->getPrice();
        }

        return $discount;
    }

    /**
     * Get I18n name
     *
     * @return string
     */
    public function getName()
    {
        return $this->facade
            ->getTranslator()
            ->trans('Add a free product to the customer cart', array(), 'coupon');
    }

    /**
     * Get I18n amount input name
     *
     * @return string
     */
    public function getInputName()
    {
        return $this->facade
            ->getTranslator()
            ->trans('Product sale element id added to the cart', array(), 'coupon');
    }

    /**
     * Get I18n tooltip
     *
     * @return string
     */
    public function getToolTip()
    {
        $toolTip = $this->facade
            ->getTranslator()
            ->trans(
                'This Coupon will give the associated product to the customer cart. The Coupon will make sure one order can get only one free product.',
                array(),
                'coupon'
            );

        return $toolTip;
    }

    /**
     * Use Thelia\Cart\CartTrait for searching current cart or create a new one
     * Then fill in a Cart Event
     *
     * @return \Thelia\Core\Event\Cart\CartEvent
     */
    protected function getCartEvent()
    {
        $cart = $this->facade->getCart();

        return new CartEvent($cart);
    }

    /**
     * Add a product to the Customer Cart
     * By generating CartEvent and dispatching it
     *
     * @param ProductSaleElements $productSaleElements Product Sale Elements to add
     *
     * @return $this
     */
    protected function addProductToCustomerCart(ProductSaleElements $productSaleElements)
    {
        $cartEvent = $this->getCartEvent();
        $cartEvent->setNewness(true);
        $cartEvent->setAppend(true);
        $cartEvent->setQuantity(1);
        $cartEvent->setProductSaleElementsId($this->productSaleElementsId);
        $cartEvent->setProduct($productSaleElements->getProductId());

        $this->facade->getDispatcher()->dispatch(TheliaEvents::CART_ADDITEM, $cartEvent);

        return $this;
    }

    /**
     * Get a product from its Product Sale Elements id
     *
     * @return ProductSaleElements
     */
    protected function getFreeProduct()
    {
        $productSaleElementsQuery = new ProductSaleElementsQuery();

        /** @var ProductSaleElements $productSaleElements */
        $productSaleElements = $productSaleElementsQuery->findOneById(
            $this->productSaleElementsId
        );

        return $productSaleElements;
    }

    /**
     * Check if the given Product Sale Elements id is already in the Cart
     *
     * @param int $productSaleElementsId Product Sale Elements id
     *
     * @return bool
     */
    protected function isAlreadyInCart($productSaleElementsId)
    {
        $return = false;
        $cart = $this->facade->getCart();
        $items = $cart->getCartItemsJoinProductSaleElements();

        /** @var  CartItem $cartItem */
        foreach ($items as $cartItem) {
            if ($cartItem->getProductSaleElementsId() == $productSaleElementsId) {
                $return = true;
                break;
            }
        }

        return $return;
    }

    /**
     * Get Product Sale Element id to give
     *
     * @return int
     */
    public function getProductSaleElementsId()
    {
        return $this->productSaleElementsId;
    }


}
